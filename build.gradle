/*
 * Set Javascript Version to ECMAScript6 in IDEA options. If not set properly the Code Formatter will
 * break js files. (Preferences -> Languages & Frameworks -> JavaScript -> JavaScript language version
 */

// Plugins
plugins {
    id 'com.github.mazzeb.auto-version' version '0.3.0'   //https://github.com/mazzeb/gradle-auto-version
    id 'java'
    id 'application'
}

// Launch class for application plugin and ShadowJAR
mainClassName = "de.codemonaut.sequeltools.LauncherVerticle"

// Variables / Versions
def vertxVersion = "3.9.13"
def junitVersion = "4.12"

startScripts.enabled = true

// Source repositories
repositories {
    mavenCentral()
}

// Add generated class to sources
sourceSets {
    main {
        java {
            srcDirs += 'src/main/generated'
        }
    }
}

// Dependencies
dependencies {
    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-config:$vertxVersion"
    compile "io.vertx:vertx-web:$vertxVersion"
    compile "io.vertx:vertx-rx-java2:$vertxVersion"
    compile "io.vertx:vertx-service-proxy:$vertxVersion"
    compile "io.vertx:vertx-jdbc-client:$vertxVersion"
    compile "io.vertx:vertx-web-templ-handlebars:$vertxVersion"

    // This is to avoid SLF4J warning at startup (it binds sl4j logging back to JUL (java.util.logging)
    // https://vertx.io/docs/vertx-core/java/#_troubleshooting
    compile "org.slf4j:slf4j-jdk14:1.7.36"

    annotationProcessor "io.vertx:vertx-codegen:$vertxVersion:processor"
    annotationProcessor  "io.vertx:vertx-rx-java2-gen:$vertxVersion"
    annotationProcessor "io.vertx:vertx-service-proxy:$vertxVersion"

    testCompile "junit:junit:$junitVersion"

    // Runtime OraJDBC, not to be included to jar!
    runtimeOnly files('lib/ojdbc*.jar')
}

// Directories to delete during clean-phase
clean {
    delete "${projectDir}/.vertx"
    delete "${projectDir}/file-uploads"
    delete "${projectDir}/out"
}

// Codegen
task generateSources(type: JavaCompile, group: 'build') {
    delete "${projectDir}/src/main/generated"

    source = sourceSets.main.java
    sourceCompatibility = "1.8"
    classpath = configurations.compile + configurations.compileOnly
    destinationDir = project.file('src/main/generated')
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor"
    ]
    options.annotationProcessorPath = configurations.annotationProcessor
}

compileJava {
    targetCompatibility = "1.8"
    sourceCompatibility = "1.8"

    dependsOn generateSources
}

autoversion {
    versionFile="src/main/resources/webroot/version.json"
}

startScripts {
    applicationDefaultJvmArgs = ["-DSQT_CONFIG_PATH=SQTCONFIGHOME"]
    mainClassName="de.codemonaut.sequeltools.LauncherVerticle"

    // Support closures to add an additional element to
    // CLASSPATH definition in the start script files.
    def configureClasspathVar = { findClasspath, pathSeparator, line ->

        // Looking for the line that starts with either CLASSPATH=
        // or set CLASSPATH=, defined by the findClasspath closure argument.
        line = line.replaceAll(~/^${findClasspath}=.*$/) { original ->

            // Get original line and append it
            // with the configuration directory.
            // Use specified path separator, which is different
            // for Windows or Unix systems.
            original = "${findClasspath}=SQTCLASSPATH"
        }
    }

    def configureUnixClasspath = configureClasspathVar.curry('CLASSPATH', ':')
    def configureWindowsClasspath = configureClasspathVar.curry('set CLASSPATH', ';')

    doLast {
        unixScript.text = unixScript.text.replace('SQTCONFIGHOME', '$APP_HOME/conf/config.json')
        windowsScript.text = windowsScript.text.replace('SQTCONFIGHOME', '%APP_HOME%\\conf\\config.json')

        unixScript.text = unixScript.readLines().collect(configureUnixClasspath).join('\n')
        windowsScript.text = windowsScript.readLines().collect(configureWindowsClasspath).join('\r\n')

        unixScript.text = unixScript.text.replace('SQTCLASSPATH', '$APP_HOME/lib/*')
        windowsScript.text = windowsScript.text.replace('SQTCLASSPATH', '%APP_HOME%\\lib\\*')
    }
}

distributions {
    main {
        contents {
            exclude("ojdbc*.jar")
        }
    }
}

